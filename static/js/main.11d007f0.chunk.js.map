{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","preState","setPreState","curState","setCurState","input","setInput","operator","setOperator","total","setTotal","inputNum","e","includes","target","innerText","pre","useEffect","opratorType","equals","cal","String","parseFloat","className","value","displayType","thousandSeparator","onClick","charAt","substring","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11d007f0.chunk.js","sourcesContent":["\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport NumberFormat from 'react-number-format';\n\nfunction App() {\nconst [preState,setPreState] = useState(\"\");\nconst [curState,setCurState] = useState(\"\");\nconst [input,setInput] = useState(\"0\");\nconst [operator,setOperator] = useState(null);\nconst [total,setTotal] = useState(false);\n\nconst inputNum = e => {\n  if(curState.includes(\".\") && e.target.innerText === \".\") return;\n\n  if(total){\n    setPreState(\"\")\n  }\n\n  curState \n  ? setCurState(pre => pre + e.target.innerText) \n  : setCurState(e.target.innerText);\n  setTotal(false)\n};\n\nuseEffect(() => {\n  setInput(curState);\n}, [curState])\n\nuseEffect(() => {\n  setInput(\"0\");\n}, [])\n\n\nconst opratorType = e => {\n  setTotal(false)\n  setOperator(e.target.innerText)\n  if(curState === \"\") return\n  if(preState !== \"\"){\n    equals()\n  }\n    setPreState(curState)\n    setCurState(\"\")\n  \n};\n\nconst equals = e => {\n  if(e?.target.innerText === \"=\"){\n    setTotal(true)\n  \n};\n\nlet cal \nswitch(operator){\n  case \"/\":\n    cal = String(parseFloat(preState) / parseFloat(curState)\n    );\n    break;\n    case \"+\":\n    cal = String(parseFloat(preState) + parseFloat(curState)\n    );\n    break;\n    case \"X\":\n    cal = String(parseFloat(preState) * parseFloat(curState)\n    );\n    break;\n    case \"-\":\n    cal = String(parseFloat(preState) - parseFloat(curState)\n    );\n    break;\n    default:\n      return\n  }\n  setInput(\"\")\n  setPreState(cal)\n  setCurState(\"\")\n}\n\nconst minusPlus = () => {\n  if(curState.charAt(0) === \"-\"){\n    setCurState(curState.substring(1))\n  }else{\n    setCurState(\"-\" + curState)\n  }\n};\n\nconst percent = () => {\n  preState ? setCurState(String(parseFloat(curState) / 100 * preState))\n  : setCurState(String(parseFloat(curState) / 100));\n};\n\nconst reset = () => {\n  setPreState(\"\");\n  setCurState(\"\");\n  setInput(\"0\")\n}\n\n  return (\n    <>\n    <div className=\"header\"> CALCULATOR</div>\n    <div className=\"container\">\n      <div className=\"wrapper\">\n        <div className=\"screen\">{input !== \"\" || input === \"0\" ? \n        <NumberFormat value={input} displayType={\"text\"} \n        thousandSeparator={true} />: <NumberFormat value={preState}\n          displayType={\"text\"} thousandSeparator={true}\n        />} \n        </div>\n          <div className=\"btn light-grey\" onClick={reset}>\n          AC\n          </div>\n          <div className=\"btn light-grey\" onClick={percent}>\n          %\n          </div>\n          <div className=\"btn light-grey\" onClick={minusPlus}>\n          +/-\n          </div>\n          <div className=\"btn orange\" onClick={opratorType}>\n          /\n          </div>\n          <div className=\"btn\" onClick={inputNum}>\n          7\n          </div>\n          <div className=\"btn\" onClick={inputNum}>\n          8\n          </div>\n          <div className=\"btn\" onClick={inputNum}>\n          9\n          </div>\n          <div className=\"btn orange\" onClick={opratorType}>\n          X\n          </div>\n          <div className=\"btn\" onClick={inputNum}>\n          4\n          </div>\n          <div className=\"btn\" onClick={inputNum}>\n          5\n          </div>\n          <div className=\"btn\" onClick={inputNum}>\n          6\n          </div>\n          <div className=\"btn orange\" onClick={opratorType}>\n          +\n          </div>\n          <div className=\"btn\" onClick={inputNum}>\n          1\n          </div>\n          <div className=\"btn\" onClick={inputNum}>\n          2\n          </div>\n          <div className=\"btn\" onClick={inputNum}>\n          3\n          </div>\n          <div className=\"btn orange\" onClick={opratorType}>\n          -\n          </div>\n          <div className=\"btn zero\" onClick={inputNum}>\n          0\n          </div>\n          <div className=\"btn\" onClick={inputNum}>\n          .\n          </div>\n          <div className=\"btn\" onClick={equals}>\n          =\n          </div>\n      </div>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}